diff --git a/.gitignore b/.gitignore
index 99e73c6..12f8644 100644
--- a/.gitignore
+++ b/.gitignore
@@ -23,5 +23,3 @@ run
 
 # Files from Forge MDK
 forge*changelog.txt
-
-logs
\ No newline at end of file
diff --git a/LICENSE b/LICENSE
deleted file mode 100644
index ff3363d..0000000
--- a/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-MIT License
-
-Copyright (c) 2020 hammertater
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/README.md b/README.md
deleted file mode 100644
index 9245acd..0000000
--- a/README.md
+++ /dev/null
@@ -1 +0,0 @@
-# treechop
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index 4713514..1c8e1df 100644
--- a/build.gradle
+++ b/build.gradle
@@ -13,22 +13,23 @@ apply plugin: 'net.minecraftforge.gradle'
 apply plugin: 'eclipse'
 apply plugin: 'maven-publish'
 
-version = '0.8'
+version = '0.7'
 group = 'ht.treechop'
-archivesBaseName = 'TreeChop-1.16.4'
+archivesBaseName = 'TreeChop-1.15.2'
 
 sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
-
+//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
 println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
+
 minecraft {
     // The mappings can be changed at any time, and must be in the following format.
     // snapshot_YYYYMMDD   Snapshot are built nightly.
     // stable_#            Stables are built at the discretion of the MCP team.
     // Use non-default mappings at your own risk. they may not always work.
     // Simply re-run your setup task after changing the mappings to update your workspace.
-    mappings channel: 'snapshot', version: '20201028-1.16.3'
+    mappings channel: 'snapshot', version: '20200514-1.15.1'
     // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
-
+    
     // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
 
     // Default run configurations.
@@ -75,8 +76,7 @@ minecraft {
             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'
 
-            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
-            args '--mod', 'treechop', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
+            args '--mod', 'treechop', '--all', '--output', file('src/generated/resources/')
 
             mods {
                 treechop {
@@ -87,14 +87,11 @@ minecraft {
     }
 }
 
-// Include resources generated by data generators.
-sourceSets.main.resources { srcDir 'src/generated/resources' }
-
 dependencies {
     // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
     // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
     // The userdev artifact is a special name and will get all sorts of transformations applied to it.
-    minecraft 'net.minecraftforge:forge:1.16.4-35.1.0'
+    minecraft 'net.minecraftforge:forge:1.15.2-31.2.46'
 
     // You may put jars on which you depend on in ./libs or you may define them like so..
     // compile "some.group:artifact:version:classifier"
@@ -120,32 +117,32 @@ dependencies {
 jar {
     manifest {
         attributes([
-                "Specification-Title": "treechop",
-                "Specification-Vendor": "hammertater",
-                "Specification-Version": "1",
-                "Implementation-Title": project.name,
-                "Implementation-Version": "${version}",
-                "Implementation-Vendor" :"hammertater",
-                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
+            "Specification-Title": "treechop",
+            "Specification-Vendor": "hammertater",
+            "Specification-Version": "1",
+            "Implementation-Title": project.name,
+            "Implementation-Version": "${version}",
+            "Implementation-Vendor" :"hammertater",
+            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
         ])
     }
 }
 
 // Example configuration to allow publishing using the maven-publish task
 // This is the preferred method to reobfuscate your jar file
-jar.finalizedBy('reobfJar')
+jar.finalizedBy('reobfJar') 
 // However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
 //publish.dependsOn('reobfJar')
 
-// publishing {
-//     publications {
-//         mavenJava(MavenPublication) {
-//             artifact jar
-//         }
-//     }
-//     repositories {
-//         maven {
-//             url "file:///${project.projectDir}/mcmodsrepo"
-//         }
-//     }
-// }
\ No newline at end of file
+//publishing {
+//    publications {
+//        mavenJava(MavenPublication) {
+//            artifact jar
+//        }
+//    }
+//    repositories {
+//        maven {
+//            url "file:///${project.projectDir}/mcmodsrepo"
+//        }
+//    }
+//}
diff --git a/chopping.gif b/chopping.gif
deleted file mode 100644
index 9c5be59..0000000
Binary files a/chopping.gif and /dev/null differ
diff --git a/redwood.gif b/redwood.gif
deleted file mode 100644
index 45a28e3..0000000
Binary files a/redwood.gif and /dev/null differ
diff --git a/src/main/java/ht/treechop/TreeChopMod.java b/src/main/java/ht/treechop/TreeChopMod.java
index 3818ac6..2613d11 100644
--- a/src/main/java/ht/treechop/TreeChopMod.java
+++ b/src/main/java/ht/treechop/TreeChopMod.java
@@ -38,7 +38,7 @@ public class TreeChopMod {
         modBus.addListener((ModConfig.Loading e) -> ConfigHandler.onConfigLoad());
         modBus.addListener((ModConfig.Reloading e) -> ConfigHandler.onConfigLoad());
 
-        ModBlocks.BLOCKS.register(FMLJavaModLoadingContext.get().getModEventBus());
+        ModBlocks.BLOCKS.register(modBus);
         MinecraftForge.EVENT_BUS.register(this);
     }
 
@@ -52,52 +52,65 @@ public class TreeChopMod {
 
         // Reuse some permission logic from PlayerInteractionManager.tryHarvestBlock
         if (
-                !ConfigHandler.COMMON.enabled.get() ||
-                !playerWantsToChop(agent) ||
                 event.isCanceled() ||
-                !(event.getWorld() instanceof World)
+                !(event.getWorld() instanceof World) ||
+                event.getPlayer().isSneaking() ||
+                !oldBlockState.canHarvestBlock(world, blockPos, agent) ||
+                agent.getHeldItemMainhand().onBlockStartBreak(blockPos, agent) ||
+                agent.blockActionRestricted(world, blockPos, agent.getServer().getGameType())
         ) {
             return;
         }
 
         if (isBlockChoppable(world, blockPos, oldBlockState)) {
-            boolean firstChop = !(oldBlockState.getBlock() instanceof ChoppedLogBlock);
-            BlockState newBlockState = firstChop ? ChopUtil.chipBlock(world, blockPos, 1, event.getPlayer(), tool) : oldBlockState;
+            BlockState blockState;
+            boolean firstChop;
 
-            event.setCanceled(true);
+            if (!(oldBlockState.getBlock() instanceof ChoppedLogBlock)) {
+                // TODO: do we need to handle fortune, feather touch, etc.?
+                blockState = ChopUtil.chipBlock(world, blockPos, 1, event.getPlayer(), tool);
+                firstChop = true;
+            } else {
+                blockState = oldBlockState;
+                firstChop = false;
+            }
 
-            if (newBlockState != null && newBlockState.getBlock() instanceof ChoppedLogBlock) {
-                ChoppedLogBlock block = (ChoppedLogBlock) newBlockState.getBlock();
-                ChoppedLogBlock.ChopResult blockThatWasChopped = block.chop(world, blockPos, newBlockState, event.getPlayer(), (firstChop) ? 0 : 1, tool);
+            if (blockState.getBlock() instanceof ChoppedLogBlock) { // This should always be true... but just in case
+                ChoppedLogBlock block = (ChoppedLogBlock) blockState.getBlock();
+                ChoppedLogBlock.ChopResult blockThatWasChopped = block.chop(world, blockPos, blockState, event.getPlayer(), (firstChop) ? 0 : 1, tool);
                 BlockPos choppedBlockPos = blockThatWasChopped.getChoppedBlockPos();
                 BlockState choppedBlockState = blockThatWasChopped.getChoppedBlockState();
-                if (choppedBlockPos == blockPos) {
+                if (choppedBlockState == blockState) {
                     choppedBlockState = oldBlockState;
                 }
 
-                // The event was canceled to prevent the block from being broken, but still want all the other consequences of breaking blocks
-                // TODO: do we need to handle fortune, silk touch, etc.?
-                doItemDamage(tool, world, choppedBlockState, choppedBlockPos, agent);
+                // We must cancel the event to prevent the block from being broken, but still want all the other consequences of breaking blocks
+                event.setCanceled(true);
+                doItemDamage(tool, agent);
                 dropExperience(world, choppedBlockPos, choppedBlockState, event.getExpToDrop());
                 doExhaustion(agent);
+                if (!firstChop) {
+                    playBreakingSound(world, choppedBlockPos, choppedBlockState);
+                }
                 agent.addStat(Stats.BLOCK_MINED.get(choppedBlockState.getBlock()));
+                tool.onBlockDestroyed(world, choppedBlockState, choppedBlockPos, agent);
             } else {
                 TreeChopMod.LOGGER.warn(String.format("Player \"%s\" failed to chip block \"%s\"", agent.getName(), oldBlockState.getBlock().getRegistryName()));
             }
         }
     }
 
-    private boolean playerWantsToChop(PlayerEntity player) {
-        return !(ConfigHandler.COMMON.canChooseNotToChop.get() && player.isSneaking());
+    private void playBreakingSound(World world, BlockPos blockPos, BlockState blockState) {
+        // Copied from World.destroyBlock
+        world.playEvent(2001, blockPos, Block.getStateId(blockState));
     }
 
     private void doExhaustion(PlayerEntity agent) {
         agent.addExhaustion(0.005F);
     }
 
-    private void doItemDamage(ItemStack itemStack, World world, BlockState blockState, BlockPos blockPos, PlayerEntity agent) {
+    private void doItemDamage(ItemStack itemStack, PlayerEntity agent) {
         ItemStack mockItemStack = itemStack.copy();
-        itemStack.onBlockDestroyed(world, blockState, blockPos, agent);
         if (itemStack.isEmpty() && !mockItemStack.isEmpty()) {
             net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(agent, mockItemStack, Hand.MAIN_HAND);
         }
diff --git a/src/main/java/ht/treechop/block/ChoppedLogBlock.java b/src/main/java/ht/treechop/block/ChoppedLogBlock.java
index db6f7ea..ef5364c 100644
--- a/src/main/java/ht/treechop/block/ChoppedLogBlock.java
+++ b/src/main/java/ht/treechop/block/ChoppedLogBlock.java
@@ -9,7 +9,6 @@ import ht.treechop.util.ChopUtil;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.entity.player.PlayerEntity;
-import net.minecraft.fluid.FluidState;
 import net.minecraft.item.ItemStack;
 import net.minecraft.state.EnumProperty;
 import net.minecraft.state.IntegerProperty;
@@ -17,7 +16,6 @@ import net.minecraft.state.StateContainer;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.shapes.ISelectionContext;
 import net.minecraft.util.math.shapes.VoxelShape;
-import net.minecraft.util.math.vector.Vector3i;
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
@@ -225,18 +223,16 @@ public class ChoppedLogBlock extends Block {
         BlockPos choppedPos = blockPos;
         BlockState choppedState = blockState;
 
-        int maxNumTreeBlocks = ConfigHandler.COMMON.maxNumTreeBlocks.get();
-
         Set<BlockPos> nearbyChoppableBlocks;
         Set<BlockPos> supportedBlocks = getConnectedBlocks(
                 Collections.singletonList(blockPos),
                 somePos -> BlockNeighbors.HORIZONTAL_AND_ABOVE.asStream(somePos)
                         .filter(checkPos -> isBlockALog(world, checkPos)),
-                maxNumTreeBlocks
+                ConfigHandler.maxNumTreeBlocks
         );
 
-        if (supportedBlocks.size() >= maxNumTreeBlocks) {
-            TreeChopMod.LOGGER.warn(String.format("Max tree size reached: %d >= %d blocks (not including leaves)", supportedBlocks.size(), maxNumTreeBlocks));
+        if (supportedBlocks.size() >= ConfigHandler.maxNumTreeBlocks) {
+            TreeChopMod.LOGGER.warn(String.format("Max tree size reached: %d >= %d blocks", supportedBlocks.size(), ConfigHandler.maxNumTreeBlocks));
         }
 
         int numChopsToFell = ChopUtil.numChopsToFell(supportedBlocks.size());
@@ -253,7 +249,7 @@ public class ChoppedLogBlock extends Block {
 
             int totalNumChops = nearbyChoppableBlocks.stream()
                     .map(world::getBlockState)
-                    .filter(blockState1 -> blockState1.hasProperty(CHOPS))
+                    .filter(blockState1 -> blockState1.getProperties().contains(CHOPS))
                     .map(blockState2 -> blockState2.get(CHOPS))
                     .reduce(Integer::sum)
                     .orElse(0) + numChops; // Include this chop
@@ -261,7 +257,7 @@ public class ChoppedLogBlock extends Block {
             if (totalNumChops >= numChopsToFell) {
                 List<BlockPos> choppedLogsSortedByY = nearbyChoppableBlocks.stream()
                         .filter(pos1 -> world.getBlockState(pos1).getBlock() instanceof ChoppedLogBlock)
-                        .sorted(Comparator.comparingInt(Vector3i::getY))
+                        .sorted(Comparator.comparingInt(BlockPos::getY))
                         .collect(Collectors.toList());
 
                 int chops = 0;
diff --git a/src/main/java/ht/treechop/config/ChopCountingAlgorithm.java b/src/main/java/ht/treechop/config/ChopCountingAlgorithm.java
index 11cb33c..a7c5f94 100644
--- a/src/main/java/ht/treechop/config/ChopCountingAlgorithm.java
+++ b/src/main/java/ht/treechop/config/ChopCountingAlgorithm.java
@@ -26,11 +26,14 @@ public enum ChopCountingAlgorithm implements IStringSerializable {
         return name;
     }
 
-    @Override
     public String getString() {
         return name;
     }
 
+    public String getName() {
+        return name;
+    }
+
     public int calculate(int numBlocks) {
         return calculation.apply(numBlocks);
     }
diff --git a/src/main/java/ht/treechop/config/ConfigHandler.java b/src/main/java/ht/treechop/config/ConfigHandler.java
index 95755a8..d460397 100644
--- a/src/main/java/ht/treechop/config/ConfigHandler.java
+++ b/src/main/java/ht/treechop/config/ConfigHandler.java
@@ -6,6 +6,11 @@ import org.apache.commons.lang3.tuple.Pair;
 
 public class ConfigHandler {
 
+    public static Integer maxNumTreeBlocks;
+    public static Integer maxNumLeavesBlocks;
+    public static Boolean breakLeaves;
+    public static ChopCountingAlgorithm chopCountingAlgorithm;
+    public static Double chopCountScale;
     public static ResourceLocation blockTagForDetectingLogs;
     public static ResourceLocation blockTagForDetectingLeaves;
 
@@ -14,29 +19,26 @@ public class ConfigHandler {
     }
 
     public static void bakeConfig() {
+        maxNumTreeBlocks = COMMON.maxNumTreeBlocks.get();
+        maxNumLeavesBlocks = COMMON.maxNumLeavesBlocks.get();
+        breakLeaves = COMMON.breakLeaves.get();
+        chopCountingAlgorithm = COMMON.chopCountingAlgorithm.get();
+        chopCountScale = COMMON.chopCountScale.get();
         blockTagForDetectingLogs = new ResourceLocation(COMMON.blockTagForDetectingLogs.get());
         blockTagForDetectingLeaves = new ResourceLocation(COMMON.blockTagForDetectingLeaves.get());
     }
 
     public static class Common {
 
-        public final ForgeConfigSpec.BooleanValue enabled;
-        public final ForgeConfigSpec.BooleanValue canChooseNotToChop;
-        public final ForgeConfigSpec.IntValue maxNumTreeBlocks;
-        public final ForgeConfigSpec.IntValue maxNumLeavesBlocks;
-        public final ForgeConfigSpec.BooleanValue breakLeaves;
-        public final ForgeConfigSpec.EnumValue<ChopCountingAlgorithm> chopCountingAlgorithm;
-        public final ForgeConfigSpec.DoubleValue chopCountScale;
-        public final ForgeConfigSpec.ConfigValue<String> blockTagForDetectingLogs;
-        public final ForgeConfigSpec.ConfigValue<String> blockTagForDetectingLeaves;
+        private final ForgeConfigSpec.IntValue maxNumTreeBlocks;
+        private final ForgeConfigSpec.IntValue maxNumLeavesBlocks;
+        private final ForgeConfigSpec.BooleanValue breakLeaves;
+        private final ForgeConfigSpec.EnumValue<ChopCountingAlgorithm> chopCountingAlgorithm;
+        private final ForgeConfigSpec.DoubleValue chopCountScale;
+        private final ForgeConfigSpec.ConfigValue<String> blockTagForDetectingLogs;
+        private final ForgeConfigSpec.ConfigValue<String> blockTagForDetectingLeaves;
 
         public Common(ForgeConfigSpec.Builder builder) {
-            enabled = builder
-                    .comment("Whether this mod is enabled or not")
-                    .define("enabled", true);
-            canChooseNotToChop = builder
-                    .comment("Whether players can deactivate chopping e.g. by sneaking")
-                    .define("canChooseNotToChop", true);
             maxNumTreeBlocks = builder
                     .comment("Maximum number of log blocks that can be detected to belong to one tree")
                     .defineInRange("maxTreeBlocks", 256, 1, 8096);
diff --git a/src/main/java/ht/treechop/init/ModBlocks.java b/src/main/java/ht/treechop/init/ModBlocks.java
index 659967f..b9b6de8 100644
--- a/src/main/java/ht/treechop/init/ModBlocks.java
+++ b/src/main/java/ht/treechop/init/ModBlocks.java
@@ -2,7 +2,6 @@ package ht.treechop.init;
 
 import ht.treechop.TreeChopMod;
 import ht.treechop.block.ChoppedLogBlock;
-import net.minecraft.block.AbstractBlock;
 import net.minecraft.block.Block;
 import net.minecraft.block.SoundType;
 import net.minecraft.block.material.Material;
@@ -18,16 +17,11 @@ public class ModBlocks {
     // Blocks
     public static final RegistryObject<Block> CHOPPED_LOG = BLOCKS.register("chopped_log",
             () -> new ChoppedLogBlock(
-                    AbstractBlock.Properties.create(
+                    Block.Properties.create(
                             Material.WOOD,
                             MaterialColor.WOOD)
                             .hardnessAndResistance(2.0F)
                             .sound(SoundType.WOOD))
     );
 
-//    static {
-//        List<Block> choppableBlocks = BlockTags.createOptional(ConfigHandler.blockTagForDetectingLogs).getAllElements();
-//        choppableBlocks.
-//    }
-
 }
diff --git a/src/main/java/ht/treechop/network/PacketHandler.java b/src/main/java/ht/treechop/network/PacketHandler.java
deleted file mode 100644
index bd20eda..0000000
--- a/src/main/java/ht/treechop/network/PacketHandler.java
+++ /dev/null
@@ -1,28 +0,0 @@
-//package ht.treechop.network;
-//
-//import ht.treechop.TreeChopMod;
-//import net.minecraft.util.ResourceLocation;
-//import net.minecraftforge.fml.network.NetworkRegistry;
-//import net.minecraftforge.fml.network.simple.SimpleChannel;
-//
-//// See https://github.com/Vazkii/Botania/blob/7e1d89a1d6deda7286744e3b7c55369b2cf5e533/src/main/java/vazkii/botania/common/network/PacketHandler.java
-//public final class PacketHandler {
-//    private static final String PROTOCOL = "7";
-//    public static final SimpleChannel HANDLER = NetworkRegistry.newSimpleChannel(
-//            new ResourceLocation(TreeChopMod.MOD_ID + "-channel"),
-//            () -> PROTOCOL,
-//            PROTOCOL::equals,
-//            PROTOCOL::equals
-//    );
-//
-//    public static void init() {
-//        int id = 0;
-//        HANDLER.registerMessage(id++, PacketToggleChopping.class, PacketToggleChopping::encode, PacketToggleChopping::decode, PacketToggleChopping::handle);
-//    }
-//
-//    public static void sendToServer(Object msg) {
-//        HANDLER.sendToServer(msg);
-//    }
-//
-//    private PacketHandler() {}
-//}
diff --git a/src/main/java/ht/treechop/state/properties/ChoppedLogShape.java b/src/main/java/ht/treechop/state/properties/ChoppedLogShape.java
index 33ddf20..86f9e23 100644
--- a/src/main/java/ht/treechop/state/properties/ChoppedLogShape.java
+++ b/src/main/java/ht/treechop/state/properties/ChoppedLogShape.java
@@ -27,8 +27,11 @@ public enum ChoppedLogShape implements IStringSerializable {
         return this.name;
     }
 
-    @Override
     public String getString() {
-        return this.name;
+        return name;
+    }
+
+    public String getName() {
+        return name;
     }
 }
diff --git a/src/main/java/ht/treechop/util/ChopUtil.java b/src/main/java/ht/treechop/util/ChopUtil.java
index b419534..99ca391 100644
--- a/src/main/java/ht/treechop/util/ChopUtil.java
+++ b/src/main/java/ht/treechop/util/ChopUtil.java
@@ -1,6 +1,5 @@
 package ht.treechop.util;
 
-import ht.treechop.TreeChopMod;
 import ht.treechop.block.ChoppedLogBlock;
 import ht.treechop.config.ConfigHandler;
 import ht.treechop.init.ModBlocks;
@@ -95,33 +94,24 @@ public class ChopUtil {
         return harvestAndChangeBlock(world, blockPos, blockState, agent, tool);
     }
 
-    /**
-     * @return the new block state, or {@code null} if unable to break the block
-     */
     private static BlockState harvestAndChangeBlock(World world, BlockPos blockPos, BlockState newBlockState, PlayerEntity agent, ItemStack tool) {
-        if (!agent.blockActionRestricted(world, blockPos, agent.getServer().getGameType()) && !tool.onBlockStartBreak(blockPos, agent)) {
+        if (!agent.isCreative()) {
             BlockState oldBlockState = world.getBlockState(blockPos);
-            if (!agent.isCreative() &&
-                    !oldBlockState.canHarvestBlock(world, blockPos, agent)) {
-                TileEntity tileEntity = world.getTileEntity(blockPos);
-                Block.spawnDrops(oldBlockState, world, blockPos, tileEntity, agent, tool);
-            }
-            world.setBlockState(blockPos, newBlockState, 3);
-            return newBlockState;
-        } else {
-            return null;
+            TileEntity tileEntity = world.getTileEntity(blockPos);
+            Block.spawnDrops(oldBlockState, world, blockPos, tileEntity, agent, tool);
         }
+        world.setBlockState(blockPos, newBlockState, 3);
+        return newBlockState;
     }
 
     public static void fellTree(IWorld world, Collection<BlockPos> treeBlocks, PlayerEntity agent) {
         boolean spawnDrops = !agent.isCreative();
 
         // Break leaves
-        if (ConfigHandler.COMMON.breakLeaves.get()) {
+        if (ConfigHandler.breakLeaves) {
             AtomicInteger iterationCounter = new AtomicInteger();
             Set<BlockPos> leavesToDestroy = new HashSet<>();
 
-            int maxNumLeavesBlocks = ConfigHandler.COMMON.maxNumLeavesBlocks.get();
             getConnectedBlocks(
                     treeBlocks,
                     pos1 -> {
@@ -132,14 +122,10 @@ public class ChopUtil {
                             .asStream(pos1)
                             .filter(pos2 -> markLeavesToDestroyAndKeepLooking(world, pos2, iterationCounter, leavesToDestroy));
                     },
-                    maxNumLeavesBlocks,
+                    ConfigHandler.maxNumLeavesBlocks,
                     iterationCounter
             );
 
-            if (leavesToDestroy.size() >= maxNumLeavesBlocks) {
-                TreeChopMod.LOGGER.warn(String.format("Max number of leaves reached: %d >= %d blocks", leavesToDestroy.size(), maxNumLeavesBlocks));
-            }
-
             destroyBlocksWithoutTooMuchNoise(world, leavesToDestroy, spawnDrops);
         }
 
@@ -185,7 +171,7 @@ public class ChopUtil {
     }
 
     static public int numChopsToFell(int numBlocks) {
-        return (int) (ConfigHandler.COMMON.chopCountingAlgorithm.get().calculate(numBlocks) * ConfigHandler.COMMON.chopCountScale.get());
+        return (int) (ConfigHandler.chopCountingAlgorithm.calculate(numBlocks) * ConfigHandler.chopCountScale);
     }
 
 }
diff --git a/src/main/resources/META-INF/mods.toml b/src/main/resources/META-INF/mods.toml
index 6b9d371..2afb52f 100644
--- a/src/main/resources/META-INF/mods.toml
+++ b/src/main/resources/META-INF/mods.toml
@@ -1,11 +1,11 @@
 modLoader="javafml"
-loaderVersion="[32,)"
-license="All rights reserved"
+loaderVersion="[31,)"
 issueTrackerURL="https://github.com/hammertater/treechop/issues"
 
 [[mods]]
 modId="treechop"
 version="${file.jarVersion}"
+displayName="HT's TreeChop"
 updateJSONURL="https://raw.githubusercontent.com/hammertater/treechop/main/update.json"
 displayURL="https://github.com/hammertater/treechop/"
 logoFile="logo.png"
diff --git a/src/main/resources/data/treechop/tags/blocks/leaves_like.json b/src/main/resources/data/treechop/tags/blocks/leaves_like.json
index fb82cf8..46a6c35 100644
--- a/src/main/resources/data/treechop/tags/blocks/leaves_like.json
+++ b/src/main/resources/data/treechop/tags/blocks/leaves_like.json
@@ -3,7 +3,6 @@
   "values": [
     "#minecraft:leaves",
     "#minecraft:wart_blocks",
-    "#forge:mushroom_caps",
-    "minecraft:shroomlight"
+    "#forge:mushroom_caps"
   ]
 }
\ No newline at end of file
diff --git a/src/main/resources/pack.mcmeta b/src/main/resources/pack.mcmeta
index c79a362..cb30387 100644
--- a/src/main/resources/pack.mcmeta
+++ b/src/main/resources/pack.mcmeta
@@ -1,7 +1,7 @@
 {
     "pack": {
-        "description": "examplemod resources",
-        "pack_format": 6,
-        "_comment": "A pack_format of 6 requires json lang files and some texture changes from 1.16.2. Note: we require v6 pack meta for all mods."
+        "description": "treechop resources",
+        "pack_format": 5,
+        "_comment": "A pack_format of 5 requires json lang files and some texture changes from 1.15. Note: we require v5 pack meta for all mods."
     }
 }
diff --git a/update.json b/update.json
deleted file mode 100644
index bc50364..0000000
--- a/update.json
+++ /dev/null
@@ -1,21 +0,0 @@
-{
-  "homepage": "https://www.curseforge.com/minecraft/mc-mods/treechop",
-  "1.16.1": {
-    "0.3": "Added limit to number of sounds played when a tree is felled\nImproved chop overflow block selection",
-    "0.4": "Added configurability",
-    "0.5": "Mushroom caps, fungus warts, and shroomlights break when felling\nDiagonal tree junctions are now choppable\nBreaking a single log destroys connected leaves\nDon't spawn drops in creative\nAny blocks with minecraft:leaves or treechop:leaves_like tags are treated as leaves\nAny blocks with minecraft:logs or treechop:choppable are treated as logs\nCan configure the block tag used to detect logs and leaves",
-    "0.6": "Fixed chopping not draining item durability\nFixed chopping not causing exhaustion\nFixed chopping not dropping experience",
-    "0.7": "Fixed chopped blocks not spawning drops",
-    "0.8": "Added config option `enabled` to disable chopping\nAdded config option `canChooseNotToChop` to prevent players from not chopping\nFixed crash when using tools from Silent's Gear (and possibly other mods)\nFixed inability to break chopped logs without chopping"
-  },
-  "promos": {
-    "1.15.2-latest": "0.7",
-    "1.15.2-recommended": "0.7",
-    "1.16.1-latest": "0.7",
-    "1.16.1-recommended": "0.7",
-    "1.16.3-latest": "0.8",
-    "1.16.3-recommended": "0.8",
-    "1.16.4-latest": "0.8",
-    "1.16.4-recommended": "0.8"
-  }
-}
